---
- name: Create output directory if it doesn't already exist
  ansible.builtin.file:
    path: '{{ playbook_dir }}/images/'
    state: directory

# Determine output filename
- name: Determine next incremental release name to use based on files already in the images/ directory
  ansible.builtin.shell: |
    set -euo pipefail
    current_date="{{ ansible_date_time.year }}{{ ansible_date_time.month }}{{ ansible_date_time.day }}"
    counter=1
    while [ -e "{{ vm_hostname }}.${current_date}$(printf %02d $counter).efi.img" ]; do
        counter=$((counter + 1))
    done
    echo "{{ vm_hostname }}.${current_date}$(printf %02d $counter)"
  args:
    chdir: '{{ playbook_dir }}/images'
  register: outputfilename
  changed_when: false

- name: Set output filename as variable
  ansible.builtin.set_fact:
    pinewall_release_name: '{{ outputfilename.stdout }}'

# Copy static files
- name: Copy static files for filesystem
  ansible.builtin.copy:
    src: '{{ playbook_dir }}/filesystem/static/root/'
    dest: '{{ playbook_dir }}/staging/{{ vm_hostname }}/root/'

- name: Ensure all init.d scripts are executable in destination filesystem
  ansible.builtin.shell: |
    set -euo pipefail
    chmod +x ./*
  args:
    chdir: '{{ playbook_dir }}/staging/{{ vm_hostname }}/root/etc/init.d/'
  changed_when: false

- name: Ensure periodic cron scripts are executable in destination filesystem
  ansible.builtin.shell: |
    set -euo pipefail
    chmod +x ./*/*
  args:
    chdir: '{{ playbook_dir }}/staging/{{ vm_hostname }}/root/etc/periodic/'
  changed_when: false

# Download base adblock.list for Unbound
- name: Download base adblock.list for Unbound
  ansible.builtin.get_url:
    url: https://gitlab.com/alexhaydock/pinehole/-/raw/main/adblock.list
    dest: '{{ playbook_dir }}/staging/{{ vm_hostname }}/root/etc/unbound/adblock.list'
    force: true

# Build image
- name: Install pre-reqs on host
  ansible.builtin.package:
    name:
      - rsync
      - syft
      - systemd-efistub
      - tar  # Busybox tar is not enough for sloci-image script
      - ukify
    state: present

- name: Fetch alpine-make-rootfs
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/alpinelinux/alpine-make-rootfs/refs/tags/v0.7.2/alpine-make-rootfs
    dest: '{{ playbook_dir }}/alpine-make-rootfs'
    checksum: 'sha256:9641ccda385b307dbf28123e68969351f297f3d339aa30d530df7c7ad7df9a03'
    mode: '0750'

# Fetch our patched version of sloci-image that doesn't use relative paths
# in the built OCI artefact (otherwise Syft complains)
- name: Fetch sloci-image
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/alexhaydock/sloci-image/refs/heads/no-relative-paths/sloci-image
    dest: '{{ playbook_dir }}/sloci-image'
    checksum: 'sha256:9a94f0634c806a62fc3636441d722e3f3ab822714edd92fe5c7a9a2c5446dbce'
    mode: '0750'

- name: Create build directory as temp dir
  ansible.builtin.tempfile:
    state: directory
  register: builddir

- name: Create /etc inside builddir
  ansible.builtin.file:
    path: '{{ builddir.path }}/etc/mkinitfs/'
    state: directory

- name: Stop mkinitfs from running during apk install
  ansible.builtin.copy:
    content: 'disable_trigger=yes'
    dest: '{{ builddir.path }}/etc/mkinitfs/mkinitfs.conf'

- name: Create an os-release ID for this build run
  ansible.builtin.copy:
    content: '{{ pinewall_release_name }}'
    dest: '{{ builddir.path }}/etc/pinewall-release'

- name: Run alpine-make-rootfs
  ansible.builtin.shell: |
    set -euo pipefail
    {{ playbook_dir }}/alpine-make-rootfs --repositories-file {{ playbook_dir }}/repositories "{{ builddir.path }}" {{ playbook_dir }}/postinstall/setup.sh
  environment:
    ALPINE_BRANCH: '{{ alpinebranch }}'
    SCRIPT_CHROOT: 'no'
    FS_SKEL_DIR: '{{ playbook_dir }}/staging/{{ vm_hostname }}/root/'
    FS_SKEL_CHOWN: 'root:root'
    PACKAGES: '{{ packageset }}'
  changed_when: true

- name: Create output directory for image and SBOM
  ansible.builtin.file:
    path: '{{ playbook_dir }}/images'
    state: directory

- name: Run sloci-image to build an OCI version of the image
  ansible.builtin.shell: |
    set -euo pipefail
    {{ playbook_dir }}/sloci-image --tar --entrypoint /start.sh {{ builddir.path }} oci:{{ pinewall_release_name }}
  args:
    chdir: '/tmp'
  changed_when: true

- name: Run Syft to produce SBOM for OCI version of the image
  ansible.builtin.command: 'syft /tmp/oci-{{ pinewall_release_name }}-x86_64-linux.oci-image.tar --from oci-archive -o syft-json={{ playbook_dir }}/images/{{ pinewall_release_name }}_sbom.syft.json -o spdx-json={{ playbook_dir }}/images/{{ pinewall_release_name }}_sbom.spdx.json'
  changed_when: true

- name: Build initramfs
  ansible.builtin.shell: |
    set -euo pipefail
    find . -path "./boot" -prune -o -print | cpio -o -H newc | gzip > "{{ builddir.path }}/boot/initramfs-{{ kernelbranch }}"
  args:
    chdir: '{{ builddir.path }}'
  changed_when: true

- name: Create output directory
  ansible.builtin.file:
    path: '{{ playbook_dir }}/images'
    state: directory

- name: Build EFI unified kernel image
  ansible.builtin.shell: |
    set -euo pipefail
    ukify build --output {{ playbook_dir }}/images/{{ pinewall_release_name }}.efi.img --cmdline "$CMDLINE" \
    --linux "{{ builddir.path }}/boot/vmlinuz-{{ kernelbranch }}" \
    --initrd "{{ builddir.path }}/boot/initramfs-{{ kernelbranch }}" \
    --os-release "@{{ builddir.path }}/etc/pinewall-release"
  environment:
    CMDLINE: 'rdinit=/sbin/init console=ttyS0'
  changed_when: true

# Update Terraform deployment code
- name: Create Terraform output dir
  ansible.builtin.file:
    path: '{{ playbook_dir }}/terraform/'
    state: directory

- name: Copy base Terraform config
  ansible.builtin.template:
    src: terraform-base.tf.j2
    dest: '{{ playbook_dir }}/terraform/terraform-base.tf'

- name: Create a Terraform deployment file for each VM
  ansible.builtin.template:
    src: terraform-vm.tf.j2
    dest: '{{ playbook_dir }}/terraform/{{ vm_hostname }}.tf'

# Clean up tempdir
- name: Delete temp build directory for this image
  ansible.builtin.file:
    path: '{{ builddir.path }}'
    state: absent
