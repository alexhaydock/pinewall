# /etc/unbound/unbound.conf

# Configure Unbound server settings
server:
    # Configure logging options
    # On Alpine, we opt to log to syslog as syslogd handles the rotation of
    # /var/log/messages, and if we log to an Unbound-specific logfile we
    # need to handle rotation ourselves via logrotate, which is a problem
    # because it only rotates once per day by default and DNS traffic can
    # result in some quite noisy files being generated over a 24-hour period.
    log-queries: yes
    log-replies: no
    use-syslog: yes
    verbosity: 1

    # Daemon settings
    num-threads: 1
    username: "unbound"

    # Listening settings
    interface: 0.0.0.0
    interface: ::0
    port: 53

    # Prefer IPv6 for sending queries to upstream servers
    prefer-ip6: yes
    prefer-ip4: no

    # Allow access from loopback and IPv6 link-local
    access-control: 127.0.0.8/8 allow
    access-control: fc00::/7 allow
    access-control: ::1/128 allow

    # Allow access on LAN from RFC1918 ranges
    access-control: 10.0.0.0/8 allow
    access-control: 172.16.0.0/12 allow
    access-control: 192.168.0.0/16 allow

    # Allow access on LAN from addresses within my IPv6 GUA /48
    # See: https://control.aa.net.uk
    access-control: 2001:db8:1234::/48 allow

    # Configure DNS64 to synthesise NAT64 addresses (while still validating DNSSEC)
    # We can test that DNSSEC still works under this config at: https://dnscheck.tools
    module-config: "dns64 validator iterator"
    # This is the prefix used by AAISP
    # NOTE: I have commented this out since I'm now hosting my own DNS64 server which
    #       uses the well-known DNS64 prefix of 64:ff9b::/96 (which is the default and
    #       does not need to be manually specified in the Unbound config to use it).
    #dns64-prefix: 2001:8b0:6464:0:66::/96

    # Certs and validation paths
    root-hints: "/usr/share/dns-root-hints/named.root"
    tls-cert-bundle: "/etc/ssl/certs/ca-certificates.crt"
    trust-anchor-file: "/usr/share/dnssec-root/trusted-key.key"

    # Don't reply to queries about our Unbound version etc
    hide-identity: yes
    hide-version: yes
    hide-trustanchor: yes

    # Block DNS rebinding attacks by declaring ranges we don't
    # want to see in DNS replies from the internet
    private-address: 10.0.0.0/8
    private-address: 172.16.0.0/12
    private-address: 192.168.0.0/16
    private-address: 169.254.0.0/16
    private-address: fd00::/8
    private-address: fe80::/10
    private-address: ::ffff:0:0/96
    private-address: 2001:db8::/32

    # Trust glue only if it is within the server's authority
    harden-glue: yes

    # Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS
    harden-dnssec-stripped: yes

    # Ensure compliance with RFC 8020, which states:
    #   This document states clearly that when a DNS resolver receives a
    #   response with a response code of NXDOMAIN, it means that the domain
    #   name which is thus denied AND ALL THE NAMES UNDER IT do not exist.
    harden-below-nxdomain: yes

    # Don't use Capitalization randomization as it known to cause DNSSEC issues sometimes
    # see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further details
    use-caps-for-id: no

    # When resolving recursively, send the minimum amount of info to the upstream servers
    # (i.e. just "com" if looking up something.com. on a root server)
    # See RFC 7816 "DNS Query Name Minimisation to Improve Privacy" for more info
    qname-minimisation: yes

    # Enable aggressive use of the DNSSEC-Validated cache (RFC 8198)
    # This is recommended by the root server operators
    # See: https://root-servers.org/media/news/Statement_on_DNS_Encryption.pdf
    aggressive-nsec: yes

    # Reduce EDNS reassembly buffer size.
    # IP fragmentation is unreliable on the Internet today, and can cause
    # transmission failures when large DNS messages are sent via UDP. Even
    # when fragmentation does work, it may not be secure; it is theoretically
    # possible to spoof parts of a fragmented DNS message, without easy
    # detection at the receiving end. Recently, there was an excellent study
    # >>> Defragmenting DNS - Determining the optimal maximum UDP response size for DNS <<<
    # by Axel Koolhaas, and Tjeerd Slokker (https://indico.dns-oarc.net/event/36/contributions/776/)
    # in collaboration with NLnet Labs explored DNS using real world data from the
    # the RIPE Atlas probes and the researchers suggested different values for
    # IPv4 and IPv6 and in different scenarios. They advise that servers should
    # be configured to limit DNS messages sent over UDP to a size that will not
    # trigger fragmentation on typical network links. DNS servers can switch
    # from UDP to TCP when a DNS response is too big to fit in this limited
    # buffer size. This value has also been suggested in DNS Flag Day 2020.
    edns-buffer-size: 1232

    # Perform prefetching of close to expired message cache entries
    # This only applies to domains that have been frequently queried
    prefetch: yes
    prefetch-key: yes

    # Ensure kernel buffer is large enough to not lose messages in traffic spikes
    so-rcvbuf: 1m

    # Define local zone records for our local search domain (home.arpa.)
    # We pick this domain because it is reserved for this purpose by RFC 8375
    # We don't need to define our domain as a locally-served one in the Unbound
    # config since it's one of Unbound's preset do-not-forward zones, including
    # .home.arpa (RFC 8375), .onion (RFC 7696), .test (RFC 6761), and .invalid (RFC 6761)
    # See: https://unbound.docs.nlnetlabs.nl/en/latest/manpages/unbound.conf.html

    # Always return NXDOMAIN for WPAD queries
    local-zone: "wpad.home.arpa" always_nxdomain

    # Enable DoH/DoT override to signal to apps we want them not to use encrypted DNS
    local-zone: "use-application-dns.net" always_nxdomain

    # Import our adblocking list here
    include: "/etc/unbound/adblock.list"

# Run as a fully recursive resolver with RFC 8806 local caching of
# the DNS root zone, to improve performance and privacy.
#
# This config actually comes mostly from the text of RFC 8806, adapted
# for newer Unbound versions based on the Unbound docs.
#
# As of the time of drafting of RFC 8806 (Appendix A), the root
# servers listed below are the ones which support AXFR of the
# full root zone.
auth-zone:
    name: "."
    primary: "b.root-servers.net"
    primary: "c.root-servers.net"
    primary: "d.root-servers.net"
    primary: "f.root-servers.net"
    primary: "g.root-servers.net"
    primary: "k.root-servers.net"
    fallback-enabled: yes
    for-downstream: no
    for-upstream: yes
